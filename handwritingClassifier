import csv
from numpy import *
import operator


def loadTrainData():
    l = []
    with open('train.csv') as file:
        lines = csv.reader(file)
        for line in lines:
            l.append(line)
    l.remove(l[0])
    l = array(l)
    labels = l[:, 0]
    data = l[:, 1:]
    return nomalizing(toInt(data)), toInt(labels)


def toInt(array):
    array = mat(array)
    m, n = shape(array)
    newArray = zeros((m, n))
    for i in range(m):
        for j in range(n):
            newArray[i, j] = int(array[i, j])
    return newArray


def nomalizing(array):
    m, n = shape(array)
    for i in range(m):
        for j in range(n):
            if array[i, j] != 0:
                array[i, j] = 1
    return array


def loadTestData():
    l = []
    with open('test.csv') as file:
        lines = csv.reader(file)
        for line in lines:
            l.append(line)
    l.remove(l[0])
    data = array(l)
    return nomalizing(toInt(data))


def classify(inX, dataSet, labels, k):
    inX = mat(inX)
    dataSet = mat(dataSet)
    labels = mat(labels)
    dataSetSize = dataSet.shape[0]
    diffMat = tile(inX, (dataSetSize, 1)) - dataSet
    sqDiffMat = array(diffMat) ** 2
    sqDistances = sqDiffMat.sum(axis=1)
    distance = sqDistances ** 0.5
    sortedDistIndicles = distance.argsort()
    classCount = {}
    for i in range(k):
        voteIlabel = labels[0, sortedDistIndicles[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel, 0)
    sortedClassCount = sorted(classCount.items(),
                              key=operator.itemgetter(1), reverse=True)
    return sortedClassCount[0][0]


def saveResult(result):
    with open('result.csv', 'wb') as myFile:
        myWriter = csv.writer(myFile)
        for i in result:
            temp = []
            temp.append(i)
            myWriter.writerow(temp)


def loadTestResult():
    l = []
    with open('rf_benchmark.csv') as file:
        lines = csv.reader(file)
        for line in lines:
            l.append(line)
    l.remove(l[0])
    labels = array(l)
    return toInt(labels[:, 1])


def handwritingClassify():
    trainData, trainLabels = loadTrainData()
    testData = loadTestData()
    testLabel = loadTestResult()
    m, n = shape(testData)
    error = 0
    resultList = []
    for i in range(m):
        classifyResult = classify(testData[i], trainData, trainLabels, 2)
        resultList.append(classifyResult)
        print (
        "%d th data: the classifier turns out to be %d, the real answer is %d" % (i, classifyResult, testLabel[0, i]))
        if classifyResult != testLabel[0, i]:
            error += 1
    print ("the total error rate is: %f" % (float(error /float(m))))
    saveResult(map(int, resultList))

handwritingClassify()